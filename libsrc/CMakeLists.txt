#Add buildin CMake External Project module
INCLUDE(ExternalProject)
#Check for mseed and mseed version 3
IF(MSEED_FOUND AND ((MSEED_VERSION VERSION_GREATER "3") OR (MSEED_VERSION VERSION_EQUAL "3")))
    SET(MSEED_CORRECT_VERSION_FOUND TRUE)
ELSE(MSEED_FOUND AND ((MSEED_VERSION VERSION_GREATER "3") OR (MSEED_VERSION VERSION_EQUAL "3")))
    SET(MSEED_CORRECT_VERSION_FOUND FALSE)
    SET(MSEED_FOUND FALSE)
ENDIF(MSEED_FOUND AND ((MSEED_VERSION VERSION_GREATER "3") OR (MSEED_VERSION VERSION_EQUAL "3")))

#set to build if lib not found
IF(MSEED_CORRECT_VERSION_FOUND)
    SET(MSEED_BUILD FALSE CACHE BOOL "build static libmseed" FORCE)
ELSE(MSEED_CORRECT_VERSION_FOUND)
    SET(MSEED_BUILD TRUE CACHE BOOL "build static libmseed" FORCE)
ENDIF(MSEED_CORRECT_VERSION_FOUND)

#Win vs unix
IF(MSEED_BUILD)
    IF (MSVC)
        SET(MAKE_CMD nmake /F Makefile.win)
        SET(mseed_lib libmseed.lib)
    ELSE (MSVC)
        SET(MAKE_CMD CFLAGS=\"-std=c99\" make)
        SET(mseed_lib libmseed.a)
    ENDIF (MSVC)
#Pulls in libmseed and build it
    ExternalProject_Add(MSEED_LIBRARY
        PREFIX ${CMAKE_CURRENT_BINARY_DIR}/libmseed
        GIT_REPOSITORY https://github.com/iris-edu/libmseed.git
        GIT_TAG main
        #        CONFIGURE_COMMAND "" mseed spec
        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E copy_directory <SOURCE_DIR> <BINARY_DIR>
        BUILD_COMMAND ${MAKE_CMD}
        #        BUILD_IN_SOURCE TRUE
        INSTALL_COMMAND ""
        )

    #create build target
    ExternalProject_Get_Property(MSEED_LIBRARY binary_dir)
    ExternalProject_Get_Property(MSEED_LIBRARY source_dir)

    ADD_LIBRARY(MSEED_LIB STATIC IMPORTED)

    SET_PROPERTY(TARGET MSEED_LIB PROPERTY IMPORTED_LOCATION
        ${binary_dir}/${mseed_lib})

    #import vars from FIND into main cmake
    ADD_DEPENDENCIES(MSEED_LIB MSEED_LIBRARY)
    GET_TARGET_PROPERTY(MSEED_LIB_FLAG MSEED_LIB IMPORTED_LOCATION)
    SET(MSEED_LIBRARIES "${MSEED_LIB_FLAG}" PARENT_SCOPE)
    SET(MSEED_INCLUDE_DIRS ${source_dir}/ PARENT_SCOPE)

ELSEIF (NOT MSEED_CORRECT_VERSION_FOUND)
    MESSAGE(FATAL_ERROR "mseed3-utils requires libmseed >= 3.0.0")
ENDIF(MSEED_BUILD)

IF (WJELEMENT_FOUND)
    SET(WJELEMENT_BUILD FALSE CACHE BOOL "Build static libwsjelement vs using
    system one")
ELSE (WJELEMENT_FOUND)
    SET(WJELEMENT_BUILD TRUE CACHE BOOL "Build static libwsjelement vs using
    system one")
ENDIF (WJELEMENT_FOUND)

IF (WJELEMENT_BUILD)
    IF (MSVC)
        SET(LIB_POSTFIX "lib")
        IF (CMAKE_BUILD_TYPE)
            SET(LIB_PREFIX "${CMAKE_BUILD_TYPE}/")
        ELSE (CMAKE_BUILD_TYPE)
            SET(LIB_PREFIX "Debug/")
        ENDIF (CMAKE_BUILD_TYPE)
    ELSE (MSVC)
        SET(LIB_POSTFIX "a")
        SET(LIB_PREFIX "lib")
    ENDIF (MSVC)

    ExternalProject_Add(WJELEMENT_LIBRARY
        GIT_REPOSITORY https://github.com/netmail-open/wjelement.git
        CMAKE_ARGS -DSTATIC_LIB=y
        INSTALL_COMMAND ""
        )
    ExternalProject_Get_Property(WJELEMENT_LIBRARY binary_dir)
    ExternalProject_Get_Property(WJELEMENT_LIBRARY source_dir)
    ADD_LIBRARY(WJELEMENT_LIB STATIC IMPORTED)
        #setup external libs
    SET_PROPERTY(TARGET WJELEMENT_LIB PROPERTY IMPORTED_LOCATION
        ${binary_dir}/src/wjelement/${LIB_PREFIX}wjelement.${LIB_POSTFIX})
    ADD_DEPENDENCIES(WJELEMENT_LIB WJELEMENT_LIBRARY)
    GET_TARGET_PROPERTY(WJELEMENT_LIB_FLAG WJELEMENT_LIB IMPORTED_LOCATION)
    LIST(APPEND WJ_LIBRARIES ${WJELEMENT_LIB_FLAG})

    ADD_LIBRARY(WJWRITER_LIB STATIC IMPORTED)
    SET_PROPERTY(TARGET WJWRITER_LIB PROPERTY IMPORTED_LOCATION
        ${binary_dir}/src/wjwriter/${LIB_PREFIX}wjwriter.${LIB_POSTFIX})
    ADD_DEPENDENCIES(WJWRITER_LIB WJELEMENT_LIBRARY)
    GET_TARGET_PROPERTY(WJWRITER_LIB_FLAG WJWRITER_LIB IMPORTED_LOCATION)
    LIST(APPEND WJ_LIBRARIES ${WJWRITER_LIB_FLAG})

    ADD_LIBRARY(WJREADER_LIB STATIC IMPORTED)
    SET_PROPERTY(TARGET WJREADER_LIB PROPERTY IMPORTED_LOCATION
        ${binary_dir}/src/wjreader/${LIB_PREFIX}wjreader.${LIB_POSTFIX})
    ADD_DEPENDENCIES(WJREADER_LIB WJELEMENT_LIBRARY)
    GET_TARGET_PROPERTY(WJREADER_LIB_FLAG WJREADER_LIB IMPORTED_LOCATION)
    LIST(APPEND WJ_LIBRARIES ${WJREADER_LIB_FLAG})

    ADD_LIBRARY(XPL_LIB STATIC IMPORTED)
    SET_PROPERTY(TARGET XPL_LIB PROPERTY IMPORTED_LOCATION
        ${binary_dir}/src/lib/${LIB_PREFIX}xpl.${LIB_POSTFIX})
    ADD_DEPENDENCIES(XPL_LIB WJELEMENT_LIBRARY)
    GET_TARGET_PROPERTY(XPL_LIB_FLAG XPL_LIB IMPORTED_LOCATION)
    LIST(APPEND WJ_LIBRARIES ${XPL_LIB_FLAG})

    SET(WJELEMENT_LIBRARIES ${WJ_LIBRARIES} PARENT_SCOPE)
    SET(WJELEMENT_INCLUDE_DIRS ${source_dir}/include PARENT_SCOPE)

    MESSAGE(STATUS ${WJELEMENT_INCLUDE_DIRS})
    MESSAGE(STATUS ${WJELEMENT_LIBRARIES})


ELSEIF(NOT WJELEMENT_FOUND)
    MESSAGE(FATAL_ERROR "mseed3-utils requires wsjelement")
ENDIF(WJELEMENT_BUILD)
